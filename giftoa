#!/usr/bin/python3

import sys
import os.path
import tempfile
import subprocess
import re
import select

def natural_sort_key(s, _nsre=re.compile('([0-9]+)')):
    return [int(text) if text.isdigit() else text.lower()
            for text in re.split(_nsre, s)] 



def usage():
    print( 
"""===============================================================================

giftoa:

 Compiles a binary that plays a GIF animation in ACSII on the terminal.


usage: giftoa gif_file.gif -o output_exe [jp2a options...]

or: giftoa gif_file.gif [jp2a options...]  (Executable is named after GIF file)

note: 
 You must have ImageMagick, jp2a and the libncurses development package 
 installed on your machine.

===============================================================================""");



def jp2a_cvars_into_file(env, file_out, var_name, image_filename, jp2a_args):
    
    jp2a = ["jp2a", image_filename]
    jp2a.extend(jp2a_args)

    success = True
    first_line = True


    with subprocess.Popen(jp2a, stdout=subprocess.PIPE, stderr=subprocess.PIPE, env=env) as p:

        data = p.communicate()

        for line in data[1].decode().split('\n'):
            if line != "":
                print(line, file=sys.stderr)
                success = False

            #END if line != ""

        #END for
            
        for line in data[0].decode().split('\n'):
            if line != "":
                if first_line:
                    file_out.write("const char* "+var_name+"= \"\\\n"+line.rstrip()+"\\n\\\n")
                    first_line = False
                else:
                    file_out.write(line.rstrip()+"\\n\\\n")
                #END else

            #END if line != ""

        #END for

        file_out.write("\";\n\n")

    #END with	
        
    return success

#END jp2a_cvars_into_file




c_headers="""
#include "signal.h"
#include "curses.h"
#include "unistd.h"
#include "stdlib.h"


"""
    
c_program="""
WINDOW * mainwin = 0;

void cleanup()
{
    if(mainwin!=0)
    {
        delwin(mainwin);
        endwin();
        refresh();
    }
}

void signal_handler(int s)
{
    cleanup();
    exit(EXIT_SUCCESS);
}


int main(int argc, char *argv[]) 
{

    struct sigaction sigIntHandler;

    sigIntHandler.sa_handler = signal_handler;
    sigemptyset(&sigIntHandler.sa_mask);
    sigIntHandler.sa_flags = 0;

    sigaction(SIGINT, &sigIntHandler, NULL);


    
    const float framesleep = 100*1000;

    if ( (mainwin = initscr()) == NULL ) {
        fprintf(stderr, "Error initialising ncurses.\\n");
        exit(EXIT_FAILURE);
    }
    
    
    const char * frames[] = FRAMES_INIT;
    int framecnt = sizeof(frames) / sizeof(const char*);
    
    
    

    int frame = 0;

    nodelay(mainwin, 1);

    while(true) 
    {
        if(getch() == 27)
        {
            break;
        }

        clear();

        mvaddstr(0, 0, frames[frame]);
        refresh();
        usleep(framesleep);

        frame = frame == framecnt-1 ? 0 : frame+1;
    }



    cleanup();

    return EXIT_SUCCESS;
}
"""


def main(argv = sys.argv):
    
    if len(argv) == 1:
        usage()
        return 1
    else:

        args_rest = 2
        in_file = argv[1]
        out_file = ""

        if len(argv) > 3 and argv[2] == "-o":
            args_rest = 4
            out_file = argv[3]
        else:
            out_file = os.path.splitext(os.path.basename(argv[1]))[0]

        #END else

    #END else
        
            
    if not os.path.isfile(in_file):
        print("'{0}' does not exist or is not a file".format(in_file))
        return 1
    #END if
    
 
 
    env = os.environ.copy()

    if "TERM" not in env: env["TERM"] = 'xterm'
    
    with tempfile.TemporaryDirectory() as work_dir:
    
        cnvrt = ["convert", "-coalesce", in_file, os.path.join(work_dir, "%d.jpg")]

        subprocess.call(cnvrt);
    
        images = sorted(os.listdir(work_dir), key=natural_sort_key)

        program_file = os.path.join(work_dir, "program.c")
        
        with open(program_file, "w") as file:

            frames = []
            frame = 0

            file.write(c_headers)
            
            for image in images:

                frames.append("frame_"+str(frame))
                
                success = jp2a_cvars_into_file(env=env,
                                               file_out=file,
                                               var_name="frame_"+str(frame),
                                               image_filename=work_dir+"/"+image,
                                               jp2a_args=argv[args_rest:])

                if success == False: return 1
          
                frame += 1

            #END for image in images

            file.write("#define FRAMES_INIT {"+",".join(frames)+"}")
            file.write(c_program)

        #END with open(program_file,"w")

        compiler = ["cc", program_file, "-o", out_file, "-lcurses"]
        subprocess.call(compiler)

        return 0

    #END with tempfile.TemporaryDirectory()

 
if __name__=="__main__":
    sys.exit(main())


